namespace siltti {};

dictionary Payload {
    sequence<u8>? payload;
};

dictionary Frames {
    u32 current;
    u32 total;
};

interface Collection {
    constructor();

    [Throws=ErrorQr]
    void clean();

    [Throws=ErrorQr]
    Payload process_frame(sequence<u8> raw_frame);

    [Throws=ErrorQr]
    Frames? frames();
};

[Error]
enum ErrorQr {
    "EmptyFrame",
    "FountainDifferentLength",
    "FountainFrameTooShort",
    "FountainInterruptedByLegacy",
    "FountainInterruptedByStatic",
    "FountainPacketEmpty",
    "LegacyDifferentLength",
    "LegacyInterruptedByFountain",
    "LegacyInterruptedByStatic",
    "LegacySameOrderDifferentContent",
    "LegacyTooShortNumberOfFrames",
    "LegacyTooShortOrder",
    "LegacyOrderTooHigh",
    "LegacyZeroFrames",
    "PoisonedLock",
};

interface Action {
    [Throws=ErrorCompanion]
    constructor([ByRef] sequence<u8> payload, [ByRef] string db_path, SignByCompanion signature_maker);
    
    sequence<sequence<u8>>? as_transmittable();
};

[Error]
enum ErrorCompanion {
    "DbInternal",
    "DbSpecsEncryptionMismatch",
    "DbSpecsHashMismatch",
    "DecodeDbMetadataKey",
    "DecodeDbMetadataValue",
    "DecodeDbSpecsKey",
    "DecodeDbSpecsValue",
    "MetadataQrDecode",
    "MetadataQrUnexpectedStructure",
    "NoMetadata",
    "NoMetaPrefixQr",
    "NoSpecs",
    "NotMetadataQr",
    "NotSubstrate",
    "NotTransactionQr",
    "OnlyV14SupportedQr",
    "SpecsQrDecode",
    "TooLargeInputForNFC",
    "TooShort",
    "UnknownPayloadType",
    "UnknownSigningAlgorithm",
};

callback interface SignByCompanion {
    sequence<u8> make_signature([ByRef] sequence<u8> data);
};

interface SignatureMaker {
    constructor(SignByCompanion signature_maker);
    sequence<u8> signed_data(sequence<u8> encoded_data);
};
