id: spidrv_eusart
package: platform
label: "SPIDRV EUSART"
description: >
  The SPI EUSART driver sets up the EUSART for SPI communication and supports
  both master and slave roles. Both blocking and interrupt driven asynchrounous
  APIs are provided for transmit and receive operations.


  This component is instantiable, meaning that several named instances can be 
  created. For each instance a configuration is generated along with an 
  initialization struct set according to this configuration. These instance
  defines and variables are available in a generated header file, 
  sl_spidrv_instances.h.


  If the Services->Runtime->System Setup->System Init component is included in
  a project, the driver instances will be initialized automatically, using the
  instance configurations, during the sl_system_init() call in main.c.


  Selecting this component will also include the SPIDRV Core component, which is 
  the implementation of the SPI driver itself.
category: "Platform|Driver|SPI"
quality: production
root_path: "platform/emdrv/spidrv"
instantiable:
  prefix: "inst"
config_file:
  - path: "config/eusart/s2/sl_spidrv_eusart_{{instance}}_config.h"
    file_id: spidrv_eusart_config
validation_helper:
  - path: script/spidrv_eusart_validation.lua
provides:
  - name: "spidrv_instance"
    allow_multiple: true
  - name: "spidrv_eusart"
    allow_multiple: true
requires:
  - name: "spidrv_core"
  - name: "device_has_eusart"
template_contribution:
  - name: "spidrv_eusart_instances"
    value: "{{instance}}"
documentation:
    docset: gecko-platform
    document: driver/api/group-spidrv