#if defined(SL_COMPONENT_CATALOG_PRESENT)
#include "sl_component_catalog.h"
#endif
#if defined(SL_CATALOG_POWER_MANAGER_PRESENT)
#include "sl_power_manager.h"
#endif
#include "em_device.h"
#include "sl_iostream.h"
#include "sl_iostream_uart.h"
#include "sl_iostream_usart.h"

// Include instance config {# Include instance config #}
{% for instance in iostream_usart_instances %} #include "sl_iostream_usart_{{ instance }}_config.h"
{% endfor %}
// MACROs for generating name and IRQ handler function  {# MACROs for generating name and IRQ handler function #}
#define SL_IOSTREAM_USART_CONCAT_PASTER(first, second, third)        first ##  second ## third
{# Set IRQ suffixes #} {% if iostream_usart_shared_irq is defined %}
{% set irq_number_suffix = '_IRQn' %}
{% set irq_handler_suffix = '_IRQHandler' %}
#define SL_IOSTREAM_USART_TX_IRQ_NUMBER(periph_nbr)     SL_IOSTREAM_USART_CONCAT_PASTER(USART, periph_nbr, {{ irq_number_suffix }})        {# Create IRQ number #}
#define SL_IOSTREAM_USART_RX_IRQ_NUMBER(periph_nbr)     SL_IOSTREAM_USART_CONCAT_PASTER(USART, periph_nbr, {{ irq_number_suffix }})        {# Create IRQ number #}
#define SL_IOSTREAM_USART_IRQ_HANDLER(periph_nbr)       SL_IOSTREAM_USART_CONCAT_PASTER(USART, periph_nbr, {{ irq_handler_suffix }})       {# Create IRQ Handler function name#}
{% else -%}
{% set tx_irq_number_suffix = '_TX_IRQn' %}
{% set tx_irq_handler_suffix = '_TX_IRQHandler' %}
{% set rx_irq_number_suffix = '_RX_IRQn' %}
{% set rx_irq_handler_suffix = '_RX_IRQHandler' %}
#define SL_IOSTREAM_USART_TX_IRQ_NUMBER(periph_nbr)     SL_IOSTREAM_USART_CONCAT_PASTER(USART, periph_nbr, {{ tx_irq_number_suffix }})        {# Create IRQ number #}
#define SL_IOSTREAM_USART_RX_IRQ_NUMBER(periph_nbr)     SL_IOSTREAM_USART_CONCAT_PASTER(USART, periph_nbr, {{ rx_irq_number_suffix }})        {# Create IRQ number #}
#define SL_IOSTREAM_USART_TX_IRQ_HANDLER(periph_nbr)    SL_IOSTREAM_USART_CONCAT_PASTER(USART, periph_nbr, {{ tx_irq_handler_suffix }})  {# Create IRQ Handler function name#}
#define SL_IOSTREAM_USART_RX_IRQ_HANDLER(periph_nbr)    SL_IOSTREAM_USART_CONCAT_PASTER(USART, periph_nbr, {{ rx_irq_handler_suffix }})  {# Create IRQ Handler function name#}
{% endif %}
#define SL_IOSTREAM_USART_RX_DMA_SIGNAL(periph_nbr)     SL_IOSTREAM_USART_CONCAT_PASTER(dmadrvPeripheralSignal_USART, periph_nbr, _RXDATAV)  {# Create DMA RX Signal name#}

#define SL_IOSTREAM_USART_CLOCK_REF(periph_nbr)         SL_IOSTREAM_USART_CONCAT_PASTER(cmuClock_, USART, periph_nbr)       {# Create clock reference #}

#if defined(SL_CATALOG_POWER_MANAGER_PRESENT) &&  defined(_SILICON_LABS_32B_SERIES_2)
// EM Events
#define SLEEP_EM_EVENT_MASK      ( SL_POWER_MANAGER_EVENT_TRANSITION_ENTERING_EM2  \
                                  | SL_POWER_MANAGER_EVENT_TRANSITION_LEAVING_EM2  \
                                  | SL_POWER_MANAGER_EVENT_TRANSITION_ENTERING_EM3 \
                                  | SL_POWER_MANAGER_EVENT_TRANSITION_LEAVING_EM3)
#endif

#if defined(SL_CATALOG_POWER_MANAGER_PRESENT) &&  defined(_SILICON_LABS_32B_SERIES_2)
static void events_handler(sl_power_manager_em_t from,
                           sl_power_manager_em_t to);
static sl_power_manager_em_transition_event_info_t events_info =
{
  .event_mask = SLEEP_EM_EVENT_MASK,
  .on_event = events_handler,
};
static sl_power_manager_em_transition_event_handle_t events_handle;
#endif

{% for instance in iostream_usart_instances %}
sl_status_t sl_iostream_usart_init_{{ instance }}(void);
{% endfor %}

// Instance(s) handle and context variable {# Generate iostream handle and context variable(s) #}
{% for instance in iostream_usart_instances %}
static sl_iostream_uart_t sl_iostream_{{ instance }};
sl_iostream_t *sl_iostream_{{ instance }}_handle = &sl_iostream_{{ instance }}.stream;
sl_iostream_uart_t *sl_iostream_uart_{{ instance }}_handle = &sl_iostream_{{ instance }};
static sl_iostream_usart_context_t  context_{{ instance }};
static uint8_t  rx_buffer_{{ instance }}[SL_IOSTREAM_USART_{{ instance | upper }}_RX_BUFFER_SIZE];
sl_iostream_instance_info_t sl_iostream_instance_{{ instance }}_info = {
  .handle = &sl_iostream_{{ instance }}.stream,
  .name = "{{ instance }}",
  .type = SL_IOSTREAM_TYPE_UART,
  .periph_id = SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL_NO,
  .init = sl_iostream_usart_init_{{ instance }},
};
{% endfor %}

{% for instance in iostream_usart_instances %}
sl_status_t sl_iostream_usart_init_{{ instance }}(void)
{
  sl_status_t status;
  USART_InitAsync_TypeDef init_{{ instance }} = USART_INITASYNC_DEFAULT;
  init_{{ instance }}.baudrate = SL_IOSTREAM_USART_{{ instance | upper }}_BAUDRATE;
  init_{{ instance }}.parity = SL_IOSTREAM_USART_{{ instance | upper }}_PARITY;
  init_{{ instance }}.stopbits = SL_IOSTREAM_USART_{{ instance | upper }}_STOP_BITS;
#if (_SILICON_LABS_32B_SERIES > 0)
  init_{{ instance }}.hwFlowControl = SL_IOSTREAM_USART_{{ instance | upper }}_FLOW_CONTROL_TYPE != uartFlowControlSoftware ? SL_IOSTREAM_USART_{{ instance | upper }}_FLOW_CONTROL_TYPE : usartHwFlowControlNone;
#endif
  sl_iostream_usart_config_t config_{{ instance }} = { {# create init struct #}
    .usart = SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL,
    .clock = SL_IOSTREAM_USART_CLOCK_REF(SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL_NO),
    .tx_port = SL_IOSTREAM_USART_{{ instance | upper }}_TX_PORT,
    .tx_pin = SL_IOSTREAM_USART_{{ instance | upper }}_TX_PIN,
    .rx_port = SL_IOSTREAM_USART_{{ instance | upper }}_RX_PORT,
    .rx_pin = SL_IOSTREAM_USART_{{ instance | upper }}_RX_PIN,
#if (_SILICON_LABS_32B_SERIES > 0)
#if defined(SL_IOSTREAM_USART_{{ instance | upper }}_CTS_PORT)
    .cts_port = SL_IOSTREAM_USART_{{ instance | upper }}_CTS_PORT,
    .cts_pin = SL_IOSTREAM_USART_{{ instance | upper }}_CTS_PIN,
#endif
#if defined(SL_IOSTREAM_USART_{{ instance | upper }}_RTS_PORT)
    .rts_port = SL_IOSTREAM_USART_{{ instance | upper }}_RTS_PORT,
    .rts_pin = SL_IOSTREAM_USART_{{ instance | upper }}_RTS_PIN,
#endif
#endif
#if defined(GPIO_USART_ROUTEEN_TXPEN)
    .usart_index = SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL_NO,
#elif defined(USART_ROUTEPEN_RXPEN)
    .usart_tx_location = SL_IOSTREAM_USART_{{ instance | upper }}_TX_LOC,
    .usart_rx_location = SL_IOSTREAM_USART_{{ instance | upper }}_RX_LOC,
#if defined(SL_IOSTREAM_USART_{{ instance | upper }}_CTS_PORT)
    .usart_cts_location = SL_IOSTREAM_USART_{{ instance | upper }}_CTS_LOC,
#endif
#if defined(SL_IOSTREAM_USART_{{ instance | upper }}_RTS_PORT)
    .usart_rts_location = SL_IOSTREAM_USART_{{ instance | upper }}_RTS_LOC,
#endif
#else
    .usart_location = SL_IOSTREAM_USART_{{ instance | upper }}_ROUTE_LOC,
#endif
  };

  sl_iostream_dma_config_t dma_config_{{ instance }} = {.src = (uint8_t *)&SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL->RXDATA,
                                                        .peripheral_signal = SL_IOSTREAM_USART_RX_DMA_SIGNAL(SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL_NO),
                                                        .size = dmadrvDataSize1};

  sl_iostream_uart_config_t uart_config_{{ instance }} = {
    .dma_cfg = dma_config_{{ instance }},
    .rx_buffer = rx_buffer_{{ instance }},
    .rx_buffer_length = SL_IOSTREAM_USART_{{ instance | upper}}_RX_BUFFER_SIZE,
    .tx_irq_number = SL_IOSTREAM_USART_TX_IRQ_NUMBER(SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL_NO),
    .rx_irq_number = SL_IOSTREAM_USART_RX_IRQ_NUMBER(SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL_NO),
    .lf_to_crlf = SL_IOSTREAM_USART_{{ instance | upper }}_CONVERT_BY_DEFAULT_LF_TO_CRLF,
    .rx_when_sleeping = SL_IOSTREAM_USART_{{ instance | upper }}_RESTRICT_ENERGY_MODE_TO_ALLOW_RECEPTION,
  };
  uart_config_{{ instance }}.sw_flow_control = SL_IOSTREAM_USART_{{ instance | upper }}_FLOW_CONTROL_TYPE == uartFlowControlSoftware;
  // Instantiate usart instance {# Initialize usart instance #}
  status = sl_iostream_usart_init(&sl_iostream_{{ instance }},
                                  &uart_config_{{ instance }},
                                  &init_{{ instance }},
                                  &config_{{ instance }},
                                  &context_{{ instance }});
  EFM_ASSERT(status == SL_STATUS_OK);

  return status;
}
{% endfor %}

{# Init function #}
void sl_iostream_usart_init_instances(void)
{
  sl_status_t status;
#if defined(SL_CATALOG_POWER_MANAGER_PRESENT) &&  defined(_SILICON_LABS_32B_SERIES_2)
  // Enable power manager notifications
  sl_power_manager_subscribe_em_transition_event(&events_handle, &events_info);
#endif

  // Instantiate usart instance(s) {# Initialize usart instance(s) #}
  {% for instance in iostream_usart_instances %}
  status = sl_iostream_usart_init_{{ instance }}();
  EFM_ASSERT(status == SL_STATUS_OK);
  {% endfor %}
}

{% for instance in iostream_usart_instances %} {# Create IRQ Handler(s) #}
// {{ instance | upper }} IRQ Handler
{% if iostream_usart_shared_irq is defined -%}
void SL_IOSTREAM_USART_IRQ_HANDLER(SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL_NO)(void)
{
  sl_iostream_usart_irq_handler(&sl_iostream_{{ instance }});
}
{% else -%}
void SL_IOSTREAM_USART_TX_IRQ_HANDLER(SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL_NO)(void)
{
  sl_iostream_usart_irq_handler(&sl_iostream_{{ instance }});
}

void SL_IOSTREAM_USART_RX_IRQ_HANDLER(SL_IOSTREAM_USART_{{ instance | upper }}_PERIPHERAL_NO)(void)
{
  sl_iostream_usart_irq_handler(&sl_iostream_{{ instance }});
}
{%- endif %}

{% endfor %}

#if defined(SL_CATALOG_POWER_MANAGER_PRESENT) && !defined(SL_CATALOG_KERNEL_PRESENT)
{% for instance in iostream_usart_instances %} {# Create IRQ Handler(s) #}
sl_power_manager_on_isr_exit_t sl_iostream_usart_{{ instance }}_sleep_on_isr_exit(void)
{
  return sl_iostream_uart_sleep_on_isr_exit(&sl_iostream_{{ instance }});
}
bool sl_iostream_usart_{{ instance }}_is_ok_to_sleep(void)
{
  return sl_iostream_uart_is_ok_to_sleep(&sl_iostream_{{ instance }});
}
{% endfor %}
#endif

#if defined(SL_CATALOG_POWER_MANAGER_PRESENT) &&  defined(_SILICON_LABS_32B_SERIES_2)
static void events_handler(sl_power_manager_em_t from,
                           sl_power_manager_em_t to)
{
  uint32_t out;
  if (((from == SL_POWER_MANAGER_EM2) 
      || (from == SL_POWER_MANAGER_EM3)) 
      && ((to == SL_POWER_MANAGER_EM1) 
      || (to == SL_POWER_MANAGER_EM0))) {
    {% for instance in iostream_usart_instances %}  
	// Wake the USART Tx pin back up
	out = GPIO_PinOutGet(SL_IOSTREAM_USART_{{ instance | upper }}_TX_PORT, SL_IOSTREAM_USART_{{ instance | upper }}_TX_PIN);
	GPIO_PinModeSet(SL_IOSTREAM_USART_{{ instance | upper }}_TX_PORT, SL_IOSTREAM_USART_{{ instance | upper }}_TX_PIN, gpioModePushPull, out);
    {% endfor %}
	} else if (((to == SL_POWER_MANAGER_EM2) 
			   || (to == SL_POWER_MANAGER_EM3)) 
			   && ((from == SL_POWER_MANAGER_EM1) 
			   || (from == SL_POWER_MANAGER_EM0))) {
	  {% for instance in iostream_usart_instances %}  
	  // Sleep the USART Tx pin on series 2 devices to save energy
      out = GPIO_PinOutGet(SL_IOSTREAM_USART_{{ instance | upper }}_TX_PORT, SL_IOSTREAM_USART_{{ instance | upper }}_TX_PIN);
      GPIO_PinModeSet(SL_IOSTREAM_USART_{{ instance | upper }}_TX_PORT, SL_IOSTREAM_USART_{{ instance | upper }}_TX_PIN, gpioModeDisabled, out);
      {% endfor %}
  }
}
#endif